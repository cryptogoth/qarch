// Test fanning out a single qubit to three qubits separated by two qubits
// each, as in Aram's fanout circuit with a triplet
// and then unfanning it out, resulting in the original source qubit,
// and hopefully some reusable cat states

include "utils/qprint.qcl";

qureg q[7];

int j;
int k;

// Apply a weird rotation to first qubit
Matrix2x2(cos(pi/8),(0,-1)*sin(pi/8),(0,-1)*sin(pi/8),cos(pi/8),q[0]);

// Fanout (this is not constant-depth, but we just need to create a
// fanned out state for testing)
// with two product qubits in the middle, as if we had just measured
// and then corrected to |0>
CNot(q[3],q[0]);
CNot(q[6],q[3]);

dump;
// Expected
// 0.92388 |0> - 0.38268i |73>

// Now attempt to disentangle q[0] and q[3], using the intermediate qubits
// in some constant-depth way

Mix(q[0]);

dump;
// Expected
// 0.65328 |0> + 0.65328 |1> - 0.2706i |72> + 0.2706i |73>

CNot(q[1],q[0]);
CNot(q[2],q[3]);

CNot(q[4],q[3]);
CNot(q[5],q[6]);

dump;
// Expected
// 0.65328 |0> + 0.65328 |3> - 0.2706i |124> + 0.2706i |127>
// + \alpha/sqrt(2) |0000000> + \alpha/sqrt(2) |0000011>
// +  \beta/sqrt(2) |1111100> -  \beta/sqrt(2) |1111111>

// we need to correct the sign on the last all ones state
Matrix4x4(1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,-1, q[2] & q[1]);

dump;
// Expected
// 0.65328 |0> + 0.65328 |3> - 0.2706i |124> - 0.2706i |127>
// + \alpha/sqrt(2) |0000000> + \alpha/sqrt(2) |0000011>
// +  \beta/sqrt(2) |1111100> +  \beta/sqrt(2) |1111111>

// =

// (\alpha |00000> + \beta|11111>)1/sqrt(2)|00> +
// (\alpha |00000> + \beta|11111>)1/sqrt(2)|11>

// =

// (\alpha |00000> + \beta|11111>)1/sqrt(2)(|00> + |11>)

// this is not quite what i wanted, not constant depth

CNot(q[2],q[1]);
CNot(q[6],q[5]);

dump;
// 0.65328 |0> + 0.65328 |7> - 0.2706i |59> - 0.2706i |60>
